plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.convert" version "1.5.10"
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.3"
}

group = 'com.woowacourse'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Database
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'

    // Flyway
    implementation 'org.flywaydb:flyway-core:6.4.2'

    // Test
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Restdocs
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

    // Jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // SvgToPng
    implementation 'org.apache.xmlgraphics:batik-all:1.12'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.4'
    implementation 'xml-apis:xml-apis:1.4.01'
    implementation 'xml-apis:xml-apis-ext:1.3.04'

    // Cryptor
    implementation 'commons-codec:commons-codec:1.15'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Mock Web Server
    testImplementation 'com.squareup.okhttp3:okhttp:4.0.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'

    // Logstash
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

    // Kafka Appender
    implementation 'com.github.danielwegener:logback-kafka-appender:0.2.0-RC2'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    finalizedBy jacocoTestReport
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

task createDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/asciidoc/html5/index.html")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn createDocument
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ["**.exception.**", "**.ControllerAdvice", "**.*ErrorResponse", "**.ValidatorMessage",
                        "**.ZzimkkongApplication", "**.DataLoader", "**.config.**",
                        "**.LoginInterceptor", "**.AuthenticationPrincipalArgumentResolver",
                        "**.slack.**", "**.Slack*", "**.AdminPageController"]

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}

project.tasks["jacocoTestCoverageVerification"].finalizedBy "sonarqube"
sonarqube {
    def sonarProperties = new Properties()
    sonarProperties.load(new FileInputStream(file("src/main/resources/config/sonar.properties")))
    def sonarToken = sonarProperties.getProperty("SONAR_TOKEN")

    properties {
        property "sonar.host.url", "http://zzimkkong-service.o-r.kr:8000"
        property "sonar.login", sonarToken
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.projectVersion', '0.0.1-SNAPSHOT'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.exclusions', '**/*Doc*.java, **/resources/**, **/config/datasource/**, **/DataLoader.java'
    }
}
